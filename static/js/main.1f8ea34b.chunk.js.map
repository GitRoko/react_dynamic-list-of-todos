{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","useState","query","setQuery","selectedOption","setSelectedOption","visibleTodos","todosFromServer","queryFromInput","filteredTodos","filter","todo","title","toLowerCase","includes","completed","getVisibleTodos","className","type","placeholder","value","onChange","event","currentTarget","preventDefault","target","id","map","option","classnames","TodoList__item","readOnly","checked","onClick","userId","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","onSetSelectedUserId","user","setUser","useEffect","then","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f8ea34b.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onSelect }) => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const selectOptions = [{ id: 1, title: 'all' }, { id: 2, title: 'completed' }, { id: 3, title: 'not completed' }];\n\n  const getSelectedOption = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    event.preventDefault();\n    setSelectedOption(event.target.value);\n  };\n\n  const getVisibleTodos = (\n    todosFromServer: Todo[],\n    queryFromInput: string,\n  ): Todo[] => {\n    let filteredTodos: Todo[] = todos;\n\n    filteredTodos = todosFromServer.filter(todo => (\n      todo.title.toLowerCase().includes(queryFromInput.toLowerCase())\n    ));\n\n    switch (selectedOption) {\n      case 'active':\n        return filteredTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return filteredTodos.filter(todo => todo.completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const visibleTodos = getVisibleTodos(todos, query);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        className=\"TodoList__input\"\n        placeholder=\"Type search word\"\n        value={query}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          setQuery(event.currentTarget.value);\n        }}\n      />\n\n      <select\n        className=\"TodoList__select\"\n        value={selectedOption}\n        onChange={getSelectedOption}\n      >\n        {selectOptions.map(option => (\n\n          <option\n            value={option.title}\n            key={option.id}\n          >\n            {option.title}\n          </option>\n\n        ))}\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              className={classnames({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                type=\"button\"\n                onClick={() => onSelect(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onSetSelectedUserId: (id: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onSetSelectedUserId }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;#\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n            type=\"button\"\n            onClick={() => onSetSelectedUserId(0)}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        <p>loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n\n  useEffect(() => {\n    getTodos().then(data => setTodos(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos ? (\n          <TodoList\n            todos={todos}\n            onSelect={setSelectedUserId}\n          />\n        ) : (\n          <p>loading...</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSetSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}